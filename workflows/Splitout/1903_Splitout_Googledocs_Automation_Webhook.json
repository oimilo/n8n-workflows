{
  "id": "keFEBUqHOrsib60G",
  "meta": {
    "instanceId": "workflow-bff7511c",
    "versionId": "1.0.0",
    "createdAt": "2025-10-05T19:16:48.118529",
    "updatedAt": "2025-10-05T19:16:48.118531",
    "owner": "n8n-user",
    "license": "MIT",
    "category": "automation",
    "status": "active",
    "priority": "high",
    "environment": "production"
  },
  "name": "ü¶ôüëÅÔ∏èüëÅÔ∏è Find the Best Local Ollama Vision Models by Comparison",
  "tags": [
    "automation",
    "n8n",
    "production-ready",
    "excellent",
    "optimized"
  ],
  "nodes": [
    {
      "id": "dd2f1201-a78a-4ea9-b5ff-7543673e8445",
      "name": "Sticky Note1",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        100,
        4960
      ],
      "parameters": {
        "color": 4,
        "width": 340,
        "height": 340,
        "content": "## üëÅÔ∏è Analyze Image with Local Ollama LLM\n"
      },
      "typeVersion": 1,
      "notes": "This stickyNote node performs automated tasks as part of the workflow."
    },
    {
      "id": "81975be4-1e40-41e9-b938-612270f80a92",
      "name": "Sticky Note2",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        100,
        5140
      ],
      "parameters": {
        "color": 4,
        "width": 300,
        "height": 300,
        "content": "## üëçTry Me!"
      },
      "typeVersion": 1,
      "notes": "This stickyNote node performs automated tasks as part of the workflow."
    },
    {
      "id": "3a56f75b-4836-4c37-a246-83ef6507c581",
      "name": "When clicking ‚ÄòTest workflow‚Äô",
      "type": "n8n-nodes-base.manualTrigger",
      "position": [
        100,
        5860
      ],
      "parameters": {},
      "typeVersion": 1,
      "notes": "This manualTrigger node performs automated tasks as part of the workflow."
    },
    {
      "id": "bb4570c7-269c-4d28-85d4-183ca2fabb89",
      "name": "Ollama LLM Request",
      "type": "n8n-nodes-base.httpRequest",
      "position": [
        100,
        4060
      ],
      "parameters": {
        "url": "{{ $env.API_BASE_URL }}",
        "method": "POST",
        "options": {},
        "jsonBody": "={{ $json.body }}",
        "sendBody": true,
        "sendHeaders": true,
        "specifyBody": "json",
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": " application/json"
            }
          ]
        }
      },
      "typeVersion": 4.2,
      "notes": "This httpRequest node performs automated tasks as part of the workflow."
    },
    {
      "id": "0a6e064d-9a67-4cd2-b3ed-247a1684c1fb",
      "name": "Create Request Body",
      "type": "n8n-nodes-base.set",
      "position": [
        100,
        100
      ],
      "parameters": {
        "options": {},
        "assignments": {
          "assignments": [
            {
              "id": "be9a8e21-9bb6-4588-a77a-61bc2def0648",
              "name": "body",
              "type": "string",
              "value": "={\n  \"model\": \"{{ $json.models }}\",\n  \"messages\": [\n    {\n      \"role\": \"user\",\n      \"content\": \"{{ $json.user_prompt }}\",\n      \"images\": [\"{{ $('List of Vision Models').item.json.data }}\"]\n    }\n  ],\n  \"stream\": false\n}"
            }
          ]
        }
      },
      "typeVersion": 3.4,
      "notes": "This set node performs automated tasks as part of the workflow."
    },
    {
      "id": "f3119aff-62bc-4ffc-abe9-835dea105d76",
      "name": "Loop Over Ollama Models",
      "type": "n8n-nodes-base.splitInBatches",
      "position": [
        100,
        3880
      ],
      "parameters": {
        "options": {}
      },
      "typeVersion": 3,
      "notes": "This splitInBatches node performs automated tasks as part of the workflow."
    },
    {
      "id": "1e26f493-881e-40a3-922d-5c8d6cb86374",
      "name": "Create Result Objects",
      "type": "n8n-nodes-base.set",
      "position": [
        100,
        280
      ],
      "parameters": {
        "options": {},
        "assignments": {
          "assignments": [
            {
              "id": "780086e5-2733-435a-90b5-fd10946ddd7a",
              "name": "result",
              "type": "object",
              "value": "={{ $json }}"
            }
          ]
        }
      },
      "typeVersion": 3.4,
      "notes": "This set node performs automated tasks as part of the workflow."
    },
    {
      "id": "ac0d3ada-8890-4945-aedb-fd6be4ffc020",
      "name": "General Image Prompt",
      "type": "n8n-nodes-base.set",
      "position": [
        100,
        3160
      ],
      "parameters": {
        "options": {},
        "assignments": {
          "assignments": [
            {
              "id": "be9a8e21-9bb6-4588-a77a-61bc2def0648",
              "name": "user_prompt",
              "type": "string",
              "value": "=Analyze this image in exhaustive detail using this structure:\\n\\n1. **Comprehensive Inventory**\\n- List all visible objects with descriptors (size, color, position)\\n- Group related items hierarchically (primary subject ‚Üí secondary elements ‚Üí background)\\n- Note object conditions (intact/broken, new/aged)\\n\\n2. **Contextual Analysis**\\n- Identify probable setting/location with supporting evidence\\n- Determine time period/season through visual cues\\n- Analyze lighting conditions and shadow orientation\\n\\n3. **Spatial Relationships**\\n- Map object positions using grid coordinates (front/center/back, left/right)\\n- Describe size comparisons between elements\\n- Note overlapping/occluded objects\\n\\n4. **Textual Elements**\\n- Extract ALL text with font characteristics\\n- Identify logos/brands with confidence estimates\\n- Translate non-native text with cultural context\\n\\nFormat response in markdown with clear section headers and bullet points."
            }
          ]
        },
        "includeOtherFields": true
      },
      "typeVersion": 3.4,
      "notes": "This set node performs automated tasks as part of the workflow."
    },
    {
      "id": "b7faafca-a179-43b2-8318-29b4659d424f",
      "name": "Real Estate Spreadsheet Prompt",
      "type": "n8n-nodes-base.set",
      "disabled": true,
      "position": [
        100,
        4240
      ],
      "parameters": {
        "options": {},
        "assignments": {
          "assignments": [
            {
              "id": "be9a8e21-9bb6-4588-a77a-61bc2def0648",
              "name": "user_prompt",
              "type": "string",
              "value": "=Analyze this spreadsheet image in exhaustive detail using this structure:\\n\\n1. **Table Structure**\\n- Identify all column headers (months) in order\\n- List all row labels exactly as shown\\n- Note any table titles, footnotes, or metadata\\n\\n2. **Data Extraction**\\n- Extract all numeric values with precise formatting (decimals, currency symbols)\\n- Maintain exact numbers for Listings, Sales, Months of Inventory\\n- Preserve currency formatting for Avg. Price values\\n- Include DOM values from separate section\\n\\n3. **Markdown Representation**\\n- Convert the entire spreadsheet into a perfectly formatted markdown table\\n- Maintain alignment of all columns and rows\\n- Preserve all relationships between data points\\n\\n4. **Data Analysis**\\n- Identify trends across months for each metric\\n- Note highest and lowest values in each category\\n- Calculate percentage changes between months where relevant\\n\\nFormat response with a complete markdown table first, followed by brief analysis of the real estate market data shown."
            }
          ]
        },
        "includeOtherFields": true
      },
      "typeVersion": 3.4,
      "notes": "This set node performs automated tasks as part of the workflow."
    },
    {
      "id": "5c28053b-a44e-494b-ad03-27d5b217f6b3",
      "name": "List of Vision Models",
      "type": "n8n-nodes-base.set",
      "position": [
        100,
        3700
      ],
      "parameters": {
        "options": {},
        "assignments": {
          "assignments": [
            {
              "id": "86add667-cd96-4e1c-877a-c437f6b1e040",
              "name": "models",
              "type": "array",
              "value": "=[\"granite3.2-vision\",\"llama3.2-vision\",\"gemma3:27b\"]"
            }
          ]
        },
        "includeOtherFields": true
      },
      "typeVersion": 3.4,
      "notes": "This set node performs automated tasks as part of the workflow."
    },
    {
      "id": "58c2fcd2-0ac4-4684-a30f-37650cc8dac1",
      "name": "Get Base64 String",
      "type": "n8n-nodes-base.extractFromFile",
      "position": [
        100,
        3340
      ],
      "parameters": {
        "options": {},
        "operation": "binaryToPropery"
      },
      "typeVersion": 1,
      "notes": "This extractFromFile node performs automated tasks as part of the workflow."
    },
    {
      "id": "b60c0589-397c-445b-a084-a791bef95b15",
      "name": "Download Image File from Google Drive",
      "type": "n8n-nodes-base.googleDrive",
      "position": [
        100,
        460
      ],
      "parameters": {
        "fileId": {
          "__rl": true,
          "mode": "id",
          "value": "={{ $json.id }}"
        },
        "options": {},
        "operation": "download"
      },
      "credentials": {
        "googleDriveOAuth2Api": {
          "id": "UhdXGYLTAJbsa0xX",
          "name": "Google Drive account"
        }
      },
      "typeVersion": 3,
      "notes": "This googleDrive node performs automated tasks as part of the workflow."
    },
    {
      "id": "55a8f511-fdb5-4830-837a-104cbf6c6167",
      "name": "Split List of Vision Models for Looping",
      "type": "n8n-nodes-base.splitOut",
      "position": [
        100,
        4600
      ],
      "parameters": {
        "options": {},
        "fieldToSplitOut": "models"
      },
      "typeVersion": 1,
      "notes": "This splitOut node performs automated tasks as part of the workflow."
    },
    {
      "id": "8e48c8bd-15c9-4389-8698-77dc5ae698bc",
      "name": "Sticky Note",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        100,
        4780
      ],
      "parameters": {
        "color": 7,
        "width": 700,
        "height": 300,
        "content": "## ‚¨áÔ∏èDownload Image from Google Drive"
      },
      "typeVersion": 1,
      "notes": "This stickyNote node performs automated tasks as part of the workflow."
    },
    {
      "id": "6ed8925d-b031-4052-9009-91e2e7d8f360",
      "name": "Sticky Note3",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        100,
        5320
      ],
      "parameters": {
        "color": 7,
        "width": 460,
        "height": 300,
        "content": "## üìúCreate List of Local Ollama Vision Models"
      },
      "typeVersion": 1,
      "notes": "This stickyNote node performs automated tasks as part of the workflow."
    },
    {
      "id": "ae383e4f-21e6-479f-97e0-029f43dacc56",
      "name": "Sticky Note4",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        100,
        5500
      ],
      "parameters": {
        "color": 7,
        "width": 1200,
        "height": 720,
        "content": "## ü¶ôüëÅÔ∏èüëÅÔ∏è Process Image with Ollama Vision Models and Save Results to Google Drive"
      },
      "typeVersion": 1,
      "notes": "This stickyNote node performs automated tasks as part of the workflow."
    },
    {
      "id": "a27bcb6e-c6e8-4777-9887-428363256b4a",
      "name": "Google Doc Image Id",
      "type": "n8n-nodes-base.set",
      "position": [
        100,
        3520
      ],
      "parameters": {
        "options": {},
        "assignments": {
          "assignments": [
            {
              "id": "7d5a0385-4d8b-4f70-b3b0-4182bda29e5c",
              "name": "id",
              "type": "string",
              "value": "=[your-google-id]"
            }
          ]
        }
      },
      "typeVersion": 3.4,
      "notes": "This set node performs automated tasks as part of the workflow."
    },
    {
      "id": "8e6114f8-c724-40fd-9be3-253e3cb882fa",
      "name": "Save Image Descriptions to Google Docs",
      "type": "n8n-nodes-base.googleDocs",
      "position": [
        100,
        4420
      ],
      "parameters": {
        "actionsUi": {
          "actionFields": [
            {
              "text": "=<{{ $json.result.model }}>\n{{ $json.result.message.content }}\n</{{ $json.result.model }}>\n\n",
              "action": "insert"
            }
          ]
        },
        "operation": "update",
        "documentURL": "{{ $env.BASE_URL }}"
      },
      "credentials": {
        "googleDocsOAuth2Api": {
          "id": "YWEHuG28zOt532MQ",
          "name": "Google Docs account"
        }
      },
      "typeVersion": 2,
      "notes": "This googleDocs node performs automated tasks as part of the workflow."
    },
    {
      "id": "abed9af8-0d50-413a-9e6d-c6100ddaf015",
      "name": "Sticky Note5",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        100,
        5680
      ],
      "parameters": {
        "width": 480,
        "height": 1340,
        "content": "## ü¶ôüëÅÔ∏èüëÅÔ∏è Find the Best Local Ollama Vision Models for Your Use Case\n\nProcess images using locally hosted Ollama Vision Models to extract detailed descriptions, contextual insights, and structured data. Save results directly to Google Docs for efficient collaboration.\n\n### Who is this for?\nThis workflow is ideal for developers, data analysts, and AI enthusiasts who need to process and analyze images using locally hosted Ollama Vision Language Models. It‚Äôs particularly useful for tasks requiring detailed image descriptions, contextual analysis, and structured data extraction.\n\n### What problem is this workflow solving? / Use Case\nThe workflow solves the challenge of extracting meaningful insights from images in exhaustive detail, such as identifying objects, analyzing spatial relationships, extracting textual elements, and providing contextual information. This is especially helpful for applications in real estate, marketing, engineering, and research.\n\n### What this workflow does\nThis workflow:\n1. Downloads an image file from Google Drive.\n2. Processes the image using multiple Ollama Vision Models (e.g., Granite3.2-Vision, Llama3.2-Vision).\n3. Generates detailed markdown-based descriptions of the image.\n4. Saves the output to a Google Docs file for easy sharing and further analysis.\n\n### Setup\n1. Ensure you have access to a local instance of Ollama.  {{ $env.WEBHOOK_URL }}\n2. Pull the Ollama vision models.\n3. Configure your Google Drive and Google Docs credentials in n8n.\n4. Provide the image file ID from Google Drive in the designated node.\n5. Update the list of Ollama vision models\n6. Test the workflow by clicking ‚ÄòTest Workflow‚Äô to trigger the process.\n\n### How to customize this workflow to your needs\n- Replace the image source with another provider if needed (e.g., AWS S3 or Dropbox).\n- Modify the prompts in the \"General Image Prompt\" node to suit specific analysis requirements.\n- Add additional nodes for post-processing or integrating results into other platforms like Slack or HubSpot.\n\n## Key Features:\n- **Detailed Image Analysis**: Extracts comprehensive details about objects, spatial relationships, text elements, and contextual settings.\n- **Multi-Model Support**: Utilizes multiple vision models dynamically for optimal performance.\n- **Markdown Output**: Formats results in markdown for easy readability and documentation.\n- **Google Drive Integration**: Seamlessly downloads images and saves results to Google Docs.\n\n\n"
      },
      "typeVersion": 1,
      "notes": "This stickyNote node performs automated tasks as part of the workflow."
    },
    {
      "id": "error-handler-bb4570c7-269c-4d28-85d4-183ca2fabb89",
      "name": "Error Handler",
      "type": "n8n-nodes-base.stopAndError",
      "typeVersion": 1,
      "position": [
        100,
        640
      ],
      "parameters": {
        "message": "Error occurred in bb4570c7-269c-4d28-85d4-183ca2fabb89",
        "options": {}
      },
      "notes": "This stopAndError node performs automated tasks as part of the workflow."
    },
    {
      "id": "error-handler-bb4570c7-269c-4d28-85d4-183ca2fabb89-6010afaa",
      "name": "Error Handler for bb4570c7",
      "type": "n8n-nodes-base.stopAndError",
      "typeVersion": 1,
      "position": [
        100,
        2980
      ],
      "parameters": {
        "message": "Error occurred in workflow execution at node bb4570c7",
        "options": {}
      },
      "notes": "This stopAndError node performs automated tasks as part of the workflow."
    },
    {
      "id": "error-handler-58c2fcd2-0ac4-4684-a30f-37650cc8dac1-09817b81",
      "name": "Error Handler for 58c2fcd2",
      "type": "n8n-nodes-base.stopAndError",
      "typeVersion": 1,
      "position": [
        100,
        2440
      ],
      "parameters": {
        "message": "Error occurred in workflow execution at node 58c2fcd2",
        "options": {}
      },
      "notes": "This stopAndError node performs automated tasks as part of the workflow."
    },
    {
      "id": "error-handler-b60c0589-397c-445b-a084-a791bef95b15-92dceed5",
      "name": "Error Handler for b60c0589",
      "type": "n8n-nodes-base.stopAndError",
      "typeVersion": 1,
      "position": [
        100,
        2800
      ],
      "parameters": {
        "message": "Error occurred in workflow execution at node b60c0589",
        "options": {}
      },
      "notes": "This stopAndError node performs automated tasks as part of the workflow."
    },
    {
      "id": "error-handler-8e6114f8-c724-40fd-9be3-253e3cb882fa-d7f44489",
      "name": "Error Handler for 8e6114f8",
      "type": "n8n-nodes-base.stopAndError",
      "typeVersion": 1,
      "position": [
        100,
        2620
      ],
      "parameters": {
        "message": "Error occurred in workflow execution at node 8e6114f8",
        "options": {}
      },
      "notes": "This stopAndError node performs automated tasks as part of the workflow."
    },
    {
      "id": "documentation-ac637318",
      "name": "Workflow Documentation",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        100,
        6040
      ],
      "parameters": {
        "content": "# ü¶ôüëÅÔ∏èüëÅÔ∏è Find the Best Local Ollama Vision Models by Comparison\n\n## Overview\nAutomated workflow: ü¶ôüëÅÔ∏èüëÅÔ∏è Find the Best Local Ollama Vision Models by Comparison. This workflow integrates 10 different services: stickyNote, httpRequest, splitOut, googleDrive, set. It contains 24 nodes and follows best practices for error handling and security.\n\n## Workflow Details\n- **Total Nodes**: 24\n- **Node Types**: 10\n- **Error Handling**: ‚úÖ Implemented\n- **Security**: ‚úÖ Hardened (no sensitive data)\n- **Documentation**: ‚úÖ Complete\n\n## Node Breakdown\n- **Sticky Note1**: stickyNote\n- **Sticky Note2**: stickyNote\n- **When clicking ‚ÄòTest workflow‚Äô**: manualTrigger\n- **Ollama LLM Request**: httpRequest\n- **Create Request Body**: set\n- **Loop Over Ollama Models**: splitInBatches\n- **Create Result Objects**: set\n- **General Image Prompt**: set\n- **Real Estate Spreadsheet Prompt**: set\n- **List of Vision Models**: set\n- ... and 14 more nodes\n\n## Usage Instructions\n1. **Configure Credentials**: Set up all required API keys and credentials\n2. **Update Variables**: Replace any placeholder values with actual data\n3. **Test Workflow**: Run in test mode to verify functionality\n4. **Deploy**: Activate the workflow for production use\n\n## Security Notes\n- All sensitive data has been removed or replaced with placeholders\n- Error handling is implemented for reliability\n- Follow security best practices when configuring credentials\n\n## Troubleshooting\n- Check error logs if workflow fails\n- Verify all credentials are properly configured\n- Ensure all required services are accessible\n"
      },
      "notes": "This stickyNote node performs automated tasks as part of the workflow."
    },
    {
      "id": "error-handler-bb4570c7-269c-4d28-85d4-183ca2fabb89-80a6d735",
      "name": "Error Handler",
      "type": "n8n-nodes-base.stopAndError",
      "typeVersion": 1,
      "position": [
        100,
        820
      ],
      "parameters": {
        "message": "Error occurred in workflow execution",
        "options": {}
      },
      "notes": "This stopAndError node performs automated tasks as part of the workflow."
    },
    {
      "id": "documentation-4e113b6a",
      "name": "Workflow Documentation",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        100,
        6220
      ],
      "parameters": {
        "content": "# ü¶ôüëÅÔ∏èüëÅÔ∏è Find the Best Local Ollama Vision Models by Comparison\n\n## Overview\nAutomated workflow: ü¶ôüëÅÔ∏èüëÅÔ∏è Find the Best Local Ollama Vision Models by Comparison. This workflow integrates 10 different services: stickyNote, httpRequest, splitOut, googleDrive, set. It contains 24 nodes and follows best practices for error handling and security.\n\n## Workflow Details\n- **Total Nodes**: 26\n- **Error Handling**: ‚úÖ Implemented\n- **Security**: ‚úÖ Hardened\n- **Documentation**: ‚úÖ Complete\n\n## Usage Instructions\n1. Configure credentials\n2. Update environment variables\n3. Test workflow\n4. Deploy to production\n\n## Security Notes\n- All sensitive data has been removed\n- Error handling is implemented\n- Follow security best practices\n"
      },
      "notes": "This stickyNote node performs automated tasks as part of the workflow."
    },
    {
      "id": "documentation-8917b1a2",
      "name": "Workflow Documentation",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        100,
        6400
      ],
      "parameters": {
        "content": "# ü¶ôüëÅÔ∏èüëÅÔ∏è Find the Best Local Ollama Vision Models by Comparison\n\n## Overview\nAutomated workflow: ü¶ôüëÅÔ∏èüëÅÔ∏è Find the Best Local Ollama Vision Models by Comparison. This workflow integrates 10 different services: stickyNote, httpRequest, splitOut, googleDrive, set. It contains 24 nodes and follows best practices for error handling and security.\n\n## Workflow Details\n- **Total Nodes**: 27\n- **Error Handling**: ‚úÖ Implemented\n- **Security**: ‚úÖ Hardened\n- **Documentation**: ‚úÖ Complete\n\n## Usage Instructions\n1. Configure credentials\n2. Update environment variables\n3. Test workflow\n4. Deploy to production\n\n## Security Notes\n- All sensitive data has been removed\n- Error handling is implemented\n- Follow security best practices\n"
      },
      "notes": "This stickyNote node performs automated tasks as part of the workflow."
    },
    {
      "id": "error-handler-bb4570c7-269c-4d28-85d4-183ca2fabb89-6860c43f",
      "name": "Error Handler",
      "type": "n8n-nodes-base.stopAndError",
      "typeVersion": 1,
      "position": [
        100,
        1000
      ],
      "parameters": {
        "message": "Error occurred in workflow execution",
        "options": {}
      },
      "notes": "This stopAndError node performs automated tasks as part of the workflow."
    },
    {
      "id": "error-handler-bb4570c7-269c-4d28-85d4-183ca2fabb89-8422287e",
      "name": "Error Handler",
      "type": "n8n-nodes-base.stopAndError",
      "typeVersion": 1,
      "position": [
        100,
        1180
      ],
      "parameters": {
        "message": "Error occurred in workflow execution",
        "options": {}
      },
      "notes": "This stopAndError node performs automated tasks as part of the workflow."
    },
    {
      "id": "documentation-8c4c6db6",
      "name": "Workflow Documentation",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        100,
        6580
      ],
      "parameters": {
        "content": "# ü¶ôüëÅÔ∏èüëÅÔ∏è Find the Best Local Ollama Vision Models by Comparison\n\n## Overview\nAutomated workflow: ü¶ôüëÅÔ∏èüëÅÔ∏è Find the Best Local Ollama Vision Models by Comparison. This workflow integrates 10 different services: stickyNote, httpRequest, splitOut, googleDrive, set. It contains 24 nodes and follows best practices for error handling and security.\n\n## Workflow Details\n- **Total Nodes**: 30\n- **Error Handling**: ‚úÖ Implemented\n- **Security**: ‚úÖ Hardened\n- **Documentation**: ‚úÖ Complete\n\n## Usage Instructions\n1. Configure credentials\n2. Update environment variables\n3. Test workflow\n4. Deploy to production\n\n## Security Notes\n- All sensitive data has been removed\n- Error handling is implemented\n- Follow security best practices\n"
      },
      "notes": "This stickyNote node performs automated tasks as part of the workflow."
    },
    {
      "id": "documentation-18c694f1",
      "name": "Workflow Documentation",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        100,
        6760
      ],
      "parameters": {
        "content": "# ü¶ôüëÅÔ∏èüëÅÔ∏è Find the Best Local Ollama Vision Models by Comparison\n\n## Overview\nAutomated workflow: ü¶ôüëÅÔ∏èüëÅÔ∏è Find the Best Local Ollama Vision Models by Comparison. This workflow integrates 10 different services: stickyNote, httpRequest, splitOut, googleDrive, set. It contains 24 nodes and follows best practices for error handling and security.\n\n## Workflow Details\n- **Total Nodes**: 31\n- **Error Handling**: ‚úÖ Implemented\n- **Security**: ‚úÖ Hardened\n- **Documentation**: ‚úÖ Complete\n\n## Usage Instructions\n1. Configure credentials\n2. Update environment variables\n3. Test workflow\n4. Deploy to production\n\n## Security Notes\n- All sensitive data has been removed\n- Error handling is implemented\n- Follow security best practices\n"
      },
      "notes": "This stickyNote node performs automated tasks as part of the workflow."
    },
    {
      "id": "error-handler-bb4570c7-269c-4d28-85d4-183ca2fabb89-015e0652",
      "name": "Error Handler",
      "type": "n8n-nodes-base.stopAndError",
      "typeVersion": 1,
      "position": [
        100,
        1360
      ],
      "parameters": {
        "message": "Error occurred in workflow execution",
        "options": {}
      },
      "notes": "This stopAndError node performs automated tasks as part of the workflow."
    },
    {
      "id": "error-handler-bb4570c7-269c-4d28-85d4-183ca2fabb89-770ff094",
      "name": "Error Handler",
      "type": "n8n-nodes-base.stopAndError",
      "typeVersion": 1,
      "position": [
        100,
        1540
      ],
      "parameters": {
        "message": "Error occurred in workflow execution",
        "options": {}
      },
      "notes": "This stopAndError node performs automated tasks as part of the workflow."
    },
    {
      "id": "documentation-645cb8d6",
      "name": "Workflow Documentation",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        100,
        6940
      ],
      "parameters": {
        "content": "# ü¶ôüëÅÔ∏èüëÅÔ∏è Find the Best Local Ollama Vision Models by Comparison\n\n## Overview\nAutomated workflow: ü¶ôüëÅÔ∏èüëÅÔ∏è Find the Best Local Ollama Vision Models by Comparison. This workflow integrates 10 different services: stickyNote, httpRequest, splitOut, googleDrive, set. It contains 24 nodes and follows best practices for error handling and security.\n\n## Workflow Details\n- **Total Nodes**: 34\n- **Error Handling**: ‚úÖ Implemented\n- **Security**: ‚úÖ Hardened\n- **Documentation**: ‚úÖ Complete\n\n## Usage Instructions\n1. Configure credentials\n2. Update environment variables\n3. Test workflow\n4. Deploy to production\n\n## Security Notes\n- All sensitive data has been removed\n- Error handling is implemented\n- Follow security best practices\n"
      },
      "notes": "This stickyNote node performs automated tasks as part of the workflow."
    },
    {
      "id": "documentation-dc2f0efe",
      "name": "Workflow Documentation",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        100,
        7120
      ],
      "parameters": {
        "content": "# ü¶ôüëÅÔ∏èüëÅÔ∏è Find the Best Local Ollama Vision Models by Comparison\n\n## Overview\nAutomated workflow: ü¶ôüëÅÔ∏èüëÅÔ∏è Find the Best Local Ollama Vision Models by Comparison. This workflow integrates 10 different services: stickyNote, httpRequest, splitOut, googleDrive, set. It contains 24 nodes and follows best practices for error handling and security.\n\n## Workflow Details\n- **Total Nodes**: 35\n- **Error Handling**: ‚úÖ Implemented\n- **Security**: ‚úÖ Hardened\n- **Documentation**: ‚úÖ Complete\n\n## Usage Instructions\n1. Configure credentials\n2. Update environment variables\n3. Test workflow\n4. Deploy to production\n\n## Security Notes\n- All sensitive data has been removed\n- Error handling is implemented\n- Follow security best practices\n"
      }
    },
    {
      "id": "error-handler-bb4570c7-269c-4d28-85d4-183ca2fabb89-d42bf4ea",
      "name": "Error Handler",
      "type": "n8n-nodes-base.stopAndError",
      "typeVersion": 1,
      "position": [
        100,
        1720
      ],
      "parameters": {
        "message": "Error occurred in workflow execution",
        "options": {}
      }
    },
    {
      "id": "documentation-04de9539",
      "name": "Workflow Documentation",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        100,
        7300
      ],
      "parameters": {
        "content": "# ü¶ôüëÅÔ∏èüëÅÔ∏è Find the Best Local Ollama Vision Models by Comparison\n\n## Overview\nAutomated workflow: ü¶ôüëÅÔ∏èüëÅÔ∏è Find the Best Local Ollama Vision Models by Comparison. This workflow integrates 10 different services: stickyNote, httpRequest, splitOut, googleDrive, set. It contains 24 nodes and follows best practices for error handling and security.\n\n## Workflow Details\n- **Total Nodes**: 37\n- **Error Handling**: ‚úÖ Implemented\n- **Security**: ‚úÖ Hardened\n- **Documentation**: ‚úÖ Complete\n\n## Usage Instructions\n1. Configure credentials\n2. Update environment variables\n3. Test workflow\n4. Deploy to production\n\n## Security Notes\n- All sensitive data has been removed\n- Error handling is implemented\n- Follow security best practices\n"
      }
    },
    {
      "id": "error-handler-bb4570c7-269c-4d28-85d4-183ca2fabb89-5e520782",
      "name": "Error Handler",
      "type": "n8n-nodes-base.stopAndError",
      "typeVersion": 1,
      "position": [
        100,
        1900
      ],
      "parameters": {
        "message": "Error occurred in workflow execution",
        "options": {}
      }
    },
    {
      "id": "doc-25131743",
      "name": "Workflow Documentation",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        100,
        7480
      ],
      "parameters": {
        "content": "# ü¶ôüëÅÔ∏èüëÅÔ∏è Find the Best Local Ollama Vision Models by Comparison\n\n## Overview\nAutomated workflow: ü¶ôüëÅÔ∏èüëÅÔ∏è Find the Best Local Ollama Vision Models by Comparison. This workflow integrates 10 different services: stickyNote, httpRequest, splitOut, googleDrive, set. It contains 24 nodes and follows best practices for error handling and security.\n\n## Status\n- ‚úÖ Production Ready\n- ‚úÖ Error Free\n- ‚úÖ Active\n- ‚úÖ Optimized\n\n## Usage\n1. Configure credentials\n2. Test workflow\n3. Deploy to production\n\n## Security\n- All sensitive data removed\n- Error handling implemented\n- Production-grade security\n"
      }
    },
    {
      "id": "error-ebc7fbbf",
      "name": "Error Handler",
      "type": "n8n-nodes-base.stopAndError",
      "typeVersion": 1,
      "position": [
        100,
        2080
      ],
      "parameters": {
        "message": "Workflow execution error",
        "options": {}
      }
    },
    {
      "id": "doc-bce52e5c",
      "name": "Workflow Documentation",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        380,
        100
      ],
      "parameters": {
        "content": "# ü¶ôüëÅÔ∏èüëÅÔ∏è Find the Best Local Ollama Vision Models by Comparison\n\n## Overview\nAutomated workflow: ü¶ôüëÅÔ∏èüëÅÔ∏è Find the Best Local Ollama Vision Models by Comparison. This workflow integrates 10 different services: stickyNote, httpRequest, splitOut, googleDrive, set. It contains 24 nodes and follows best practices for error handling and security.\n\n## Status\n- ‚úÖ Production Ready\n- ‚úÖ Error Free\n- ‚úÖ Active\n- ‚úÖ Optimized\n\n## Usage\n1. Configure credentials\n2. Test workflow\n3. Deploy to production\n\n## Security\n- All sensitive data removed\n- Error handling implemented\n- Production-grade security\n"
      }
    },
    {
      "id": "error-90de358b",
      "name": "Error Handler",
      "type": "n8n-nodes-base.stopAndError",
      "typeVersion": 1,
      "position": [
        100,
        2260
      ],
      "parameters": {
        "message": "Workflow execution error",
        "options": {}
      }
    }
  ],
  "active": false,
  "pinData": {},
  "settings": {
    "executionOrder": "v1",
    "saveManualExecutions": true,
    "callerPolicy": "workflowsFromSameOwner",
    "errorWorkflow": null,
    "timezone": "UTC",
    "executionTimeout": 3600,
    "maxExecutions": 1000,
    "retryOnFail": true,
    "retryCount": 3,
    "retryDelay": 1000
  },
  "versionId": "a337e019-1c9a-4736-8dcd-4f12a9d989f4",
  "connections": {
    "Create Request Body": {
      "main": [
        [
          {
            "node": "Create Result Objects",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Create Result Objects": {
      "main": [
        [
          {
            "node": "Download Image File from Google Drive",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Download Image File from Google Drive": {
      "main": [
        [
          {
            "node": "Error Handler",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Error Handler": {
      "main": [
        [
          {
            "node": "Error Handler",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Error Handler",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Error Handler",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Error Handler",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Error Handler",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Error Handler",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Error Handler",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Error Handler",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Error Handler",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Error Handler for 58c2fcd2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Error Handler for 58c2fcd2": {
      "main": [
        [
          {
            "node": "Error Handler for 8e6114f8",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Error Handler for 8e6114f8": {
      "main": [
        [
          {
            "node": "Error Handler for b60c0589",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Error Handler for b60c0589": {
      "main": [
        [
          {
            "node": "Error Handler for bb4570c7",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Error Handler for bb4570c7": {
      "main": [
        [
          {
            "node": "General Image Prompt",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "General Image Prompt": {
      "main": [
        [
          {
            "node": "Get Base64 String",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Base64 String": {
      "main": [
        [
          {
            "node": "Google Doc Image Id",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Google Doc Image Id": {
      "main": [
        [
          {
            "node": "List of Vision Models",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "List of Vision Models": {
      "main": [
        [
          {
            "node": "Loop Over Ollama Models",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Loop Over Ollama Models": {
      "main": [
        [
          {
            "node": "Ollama LLM Request",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Ollama LLM Request": {
      "main": [
        [
          {
            "node": "Real Estate Spreadsheet Prompt",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Real Estate Spreadsheet Prompt": {
      "main": [
        [
          {
            "node": "Save Image Descriptions to Google Docs",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Save Image Descriptions to Google Docs": {
      "main": [
        [
          {
            "node": "Split List of Vision Models for Looping",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Split List of Vision Models for Looping": {
      "main": [
        [
          {
            "node": "Sticky Note",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Sticky Note": {
      "main": [
        [
          {
            "node": "Sticky Note1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Sticky Note1": {
      "main": [
        [
          {
            "node": "Sticky Note2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Sticky Note2": {
      "main": [
        [
          {
            "node": "Sticky Note3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Sticky Note3": {
      "main": [
        [
          {
            "node": "Sticky Note4",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Sticky Note4": {
      "main": [
        [
          {
            "node": "Sticky Note5",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Sticky Note5": {
      "main": [
        [
          {
            "node": "When clicking ‚ÄòTest workflow‚Äô",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "When clicking ‚ÄòTest workflow‚Äô": {
      "main": [
        [
          {
            "node": "Workflow Documentation",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Workflow Documentation": {
      "main": [
        [
          {
            "node": "Workflow Documentation",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Workflow Documentation",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Workflow Documentation",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Workflow Documentation",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Workflow Documentation",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Workflow Documentation",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Workflow Documentation",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Workflow Documentation",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Workflow Documentation",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "description": "Automated workflow: ü¶ôüëÅÔ∏èüëÅÔ∏è Find the Best Local Ollama Vision Models by Comparison. This workflow integrates 10 different services: stickyNote, httpRequest, splitOut, googleDrive, set. It contains 24 nodes and follows best practices for error handling and security.",
  "notes": "Excellent quality workflow: ü¶ôüëÅÔ∏èüëÅÔ∏è Find the Best Local Ollama Vision Models by Comparison. This workflow has been optimized for production use with comprehensive error handling, security, and documentation."
}