{
  "id": "5opbTWPZRN05bYdz",
  "meta": {
    "instanceId": "workflow-1bef89e7",
    "versionId": "1.0.0",
    "createdAt": "2025-10-05T19:16:47.073863",
    "updatedAt": "2025-10-05T19:16:47.073866",
    "owner": "n8n-user",
    "license": "MIT",
    "category": "automation",
    "status": "active",
    "priority": "high",
    "environment": "production"
  },
  "name": "Build an MCP Server with Google Calendar",
  "tags": [
    "automation",
    "n8n",
    "production-ready",
    "excellent",
    "optimized"
  ],
  "nodes": [
    {
      "id": "trigger-7d0a8793",
      "name": "Manual Trigger",
      "type": "n8n-nodes-base.manualTrigger",
      "typeVersion": 1,
      "position": [
        100,
        2260
      ],
      "parameters": {}
    },
    {
      "id": "4be79e3f-3e83-4432-b23f-4e4e9cac171b",
      "name": "Sticky Note8",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        4020,
        100
      ],
      "parameters": {
        "color": 2,
        "width": 2720,
        "height": 140,
        "content": ""
      },
      "typeVersion": 1,
      "notes": "This stickyNote node performs automated tasks as part of the workflow."
    },
    {
      "id": "439a0233-c8ec-4ea5-8630-0f6e62c76bef",
      "name": "Sticky Note9",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        4300,
        100
      ],
      "parameters": {
        "color": 2,
        "width": 960,
        "height": 80,
        "content": "# Learn How to Build a MCP Server with Google Calendar"
      },
      "typeVersion": 1,
      "notes": "This stickyNote node performs automated tasks as part of the workflow."
    },
    {
      "id": "08996f0a-4a2d-438f-a8d7-aca78968d33f",
      "name": "Sticky Note2",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        2620,
        100
      ],
      "parameters": {
        "color": 7,
        "width": 620,
        "height": 280,
        "content": "# Introduce\n\nThis tutorial focuses on guiding users through the process of deploying MCP service with Google Calendar. By following this step - by - step guide, you'll be able to leverage the powerful features of MCP Server with Google Calendar, such as creating, reading, updating, and deleting events."
      },
      "typeVersion": 1,
      "notes": "This stickyNote node performs automated tasks as part of the workflow."
    },
    {
      "id": "0f866ad6-d1af-4732-be64-8c97af7e55ac",
      "name": "Sticky Note5",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        3180,
        100
      ],
      "parameters": {
        "color": 6,
        "width": 620,
        "height": 760,
        "content": "# Author\n![SunGuannan]({{ $env.WEBHOOK_URL }}\n### SunGuannan\nFreelance consultant from China, specializing in automations and data analysis. I work with select clients, addressing their toughest projects.\n\nFor business inquiries, email me at sguann2023@gmail.com.\n"
      },
      "typeVersion": 1,
      "notes": "This stickyNote node performs automated tasks as part of the workflow."
    },
    {
      "id": "4e2cdec7-8d04-40a7-9270-0f408ebf2efb",
      "name": "Sticky Note4",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        2900,
        100
      ],
      "parameters": {
        "color": 5,
        "width": 620,
        "content": "## Step1: Google Calendar tools require credentials\nIf you don't have your Google Credentials set up in n8n yet, watch [this]({{ $env.WEBHOOK_URL }} video to learn how to do it.\n\nIf you are using n8n Cloud plans, it's very intuitive to setup and you may not even need the tutorial."
      },
      "typeVersion": 1,
      "notes": "This stickyNote node performs automated tasks as part of the workflow."
    },
    {
      "id": "0a3941f5-959f-499c-b5a6-b2b66b203b1e",
      "name": "Sticky Note",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        940,
        100
      ],
      "parameters": {
        "color": 5,
        "width": 620,
        "height": 220,
        "content": "## Step 2: Create MCP Server Trigger and activate\nLog in to n8n and create a new workflow. On the new workflow page, click “Add First Step” to open a searchable menu of nodes and triggers. \n\nType “MCP Server Trigger” in the search bar and select it from the results to start your workflow. \n\nThis sets up how n8n receives events from the MCP Server, laying the groundwork for integrating Google Calendar into your automation. "
      },
      "typeVersion": 1,
      "notes": "This stickyNote node performs automated tasks as part of the workflow."
    },
    {
      "id": "42800020-7ed3-4419-9847-d2a751aa3071",
      "name": "SearchEvent",
      "type": "n8n-nodes-base.googleCalendarTool",
      "position": [
        380,
        100
      ],
      "parameters": {
        "limit": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Limit', ``, 'number') }}",
        "options": {},
        "timeMax": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Before', ``, 'string') }}",
        "timeMin": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('After', ``, 'string') }}",
        "calendar": {
          "__rl": true,
          "mode": "list",
          "value": "sguann2023@gmail.com",
          "cachedResultName": "sguann2023@gmail.com"
        },
        "operation": "getAll"
      },
      "credentials": {
        "googleCalendarOAuth2Api": {
          "id": "Wi0S7gZu9R8zFjTC",
          "name": "Google Calendar account"
        }
      },
      "typeVersion": 1.3,
      "notes": "This googleCalendarTool node performs automated tasks as part of the workflow."
    },
    {
      "id": "5d2bce57-f77d-4fd1-9342-d81107a6009d",
      "name": "CreateEvent",
      "type": "n8n-nodes-base.googleCalendarTool",
      "position": [
        100,
        460
      ],
      "parameters": {
        "end": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('End', ``, 'string') }}",
        "start": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Start', ``, 'string') }}",
        "calendar": {
          "__rl": true,
          "mode": "list",
          "value": "sguann2023@gmail.com",
          "cachedResultName": "sguann2023@gmail.com"
        },
        "additionalFields": {
          "summary": "={{ $fromAI(\"event_title\", \"The event title\", \"string\") }}",
          "description": "={{ $fromAI(\"event_description\", \"The event description\", \"string\") }}"
        }
      },
      "credentials": {
        "googleCalendarOAuth2Api": {
          "id": "Wi0S7gZu9R8zFjTC",
          "name": "Google Calendar account"
        }
      },
      "typeVersion": 1.3,
      "notes": "This googleCalendarTool node performs automated tasks as part of the workflow."
    },
    {
      "id": "dbebec9c-fecc-4154-ba77-cfbb519ba40a",
      "name": "UpdateEvent",
      "type": "n8n-nodes-base.googleCalendarTool",
      "position": [
        4580,
        100
      ],
      "parameters": {
        "eventId": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Event_ID', ``, 'string') }}",
        "calendar": {
          "__rl": true,
          "mode": "list",
          "value": "sguann2023@gmail.com",
          "cachedResultName": "sguann2023@gmail.com"
        },
        "operation": "update",
        "updateFields": {
          "end": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('End', ``, 'string') }}",
          "start": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Start', ``, 'string') }}",
          "summary": "={{ $fromAI(\"event_title\", \"The event title\", \"string\") }}",
          "description": "={{ $fromAI(\"event_description\", \"The event description\", \"string\") }}"
        }
      },
      "credentials": {
        "googleCalendarOAuth2Api": {
          "id": "Wi0S7gZu9R8zFjTC",
          "name": "Google Calendar account"
        }
      },
      "typeVersion": 1.3,
      "notes": "This googleCalendarTool node performs automated tasks as part of the workflow."
    },
    {
      "id": "24ef1fd5-29dc-4208-a33b-5337307d01e0",
      "name": "DeleteEvent",
      "type": "n8n-nodes-base.googleCalendarTool",
      "position": [
        100,
        640
      ],
      "parameters": {
        "eventId": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Event_ID', ``, 'string') }}",
        "options": {},
        "calendar": {
          "__rl": true,
          "mode": "list",
          "value": "sguann2023@gmail.com",
          "cachedResultName": "sguann2023@gmail.com"
        },
        "operation": "delete"
      },
      "credentials": {
        "googleCalendarOAuth2Api": {
          "id": "Wi0S7gZu9R8zFjTC",
          "name": "Google Calendar account"
        }
      },
      "typeVersion": 1.3,
      "notes": "This googleCalendarTool node performs automated tasks as part of the workflow."
    },
    {
      "id": "ec4aa55d-c6ee-4990-9c51-6ee1892600dd",
      "name": "Google Calendar MCP",
      "type": "n8n-nodes-base.noOp",
      "position": [
        100,
        2080
      ],
      "webhookId": "f9d9d5ea-6f83-42c8-ae50-ee6c71789bca",
      "parameters": {
        "path": "my-calendar"
      },
      "typeVersion": 1,
      "notes": "This mcpTrigger node performs automated tasks as part of the workflow."
    },
    {
      "id": "7e49bc5e-c3c1-47b3-8a0a-8f3b91ad954b",
      "name": "Sticky Note6",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        3460,
        100
      ],
      "parameters": {
        "color": 5,
        "width": 620,
        "height": 600,
        "content": "## Step 3: Incorporate Google Calendar Tools\nAfter creating the MCP Server Trigger, rename it to \"Google Calendar MCP \" for clarity. \n\nClick \"Tools\" and type \"Google Calendar\" in the search bar to find tools for various Google Calendar operations. \n\nYou can add multiple tools, each for a specific task. For example, \"Get Many\" retrieves multiple events, \"Create\" makes new ones, \"Update\" modifies existing events, and \"Delete\" removes them. Use these tools to build customized, efficient workflows for your Google Calendar data. "
      },
      "typeVersion": 1,
      "notes": "This stickyNote node performs automated tasks as part of the workflow."
    },
    {
      "id": "6a86eb61-0e1f-4de1-a77f-0470fe1cd3ec",
      "name": "Sticky Note1",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        1220,
        100
      ],
      "parameters": {
        "color": 5,
        "width": 620,
        "height": 580,
        "content": "## Step 4: Copy Your MCP Server Trigger URL and Activate Your Workflow\nDouble - click on the \"Google Calendar MCP\" node. On the node detail page, you'll locate the production URL, which might look something like \"{{ $env.WEBHOOK_URL }} - calendar/sse\". Make sure to copy this URL as it will be used later in your workflow setup.\n\nAfter obtaining the URL, save the workflow. Then, check the \"Inactive\" button to activate the trigger. \n![Inactive]({{ $env.WEBHOOK_URL }}\n![Active]({{ $env.WEBHOOK_URL }}\nOnce activated, your workflow will start listening for events from the MCP Server, enabling seamless integration with the Google Calendar service."
      },
      "typeVersion": 1,
      "notes": "This stickyNote node performs automated tasks as part of the workflow."
    },
    {
      "id": "aed25c42-78e1-4984-8831-768e2bbe6888",
      "name": "Sticky Note7",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        3740,
        100
      ],
      "parameters": {
        "color": 4,
        "width": 620,
        "height": 140,
        "content": "## Step 5: Create a New Workflow for AI Agent\nAt this stage, you're required to create a new workflow. Once the new workflow interface is open, click on the \"Add First Step\" option. In the list of available nodes and triggers that appears, search for and select the \"on Chat Message\" option to add it to your workflow. This sets the initial trigger for your AI-Agent-related workflow."
      },
      "typeVersion": 1,
      "notes": "This stickyNote node performs automated tasks as part of the workflow."
    },
    {
      "id": "214dbba6-dffe-4c43-8c14-77babd52107f",
      "name": "Sticky Note10",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        1500,
        100
      ],
      "parameters": {
        "color": 4,
        "width": 620,
        "height": 1060,
        "content": "## Step 6: Add AI Agent Node\nAfter successfully creating the Chat Messages Trigger, you can proceed to add an \"AI Agent\" node right after it. Double - click on this newly added \"AI Agent\" node to open its configuration panel.\n\nIn the configuration, you'll need to add a specific option. Under the System Message field, enter the following text: \"You are a helpful assistant. Current datetime is {{ $now.toString() }}\". This message provides the AI with the current date and time, which can be useful for context in various interactions.\n\nNext, select an appropriate Large Language Model (LLM) from the available options. This model will be responsible for handling the chat and delivering events.\n\nTo enable continuous and context - aware conversations, add memory to the Agent. This allows the AI Agent to remember previous interactions, providing a more seamless and engaging chat experience.\n\nFinally, search for and add the \"MCP Client\" tool. In the SSE Endpoint section of the \"MCP Client\" configuration, paste the URL that you copied in Step 4. This step connects the AI Agent workflow to the MCP Server, enabling data flow and interaction between the two. "
      },
      "typeVersion": 1,
      "notes": "This stickyNote node performs automated tasks as part of the workflow."
    },
    {
      "id": "7ba10d96-e1cc-456d-9174-c848524466dd",
      "name": "AI Agent",
      "type": "n8n-nodes-base.noOp",
      "position": [
        100,
        100
      ],
      "parameters": {
        "options": {
          "systemMessage": "=You are a helpful assistant.\nCurrent datetime is {{ $now.toString() }}"
        }
      },
      "typeVersion": 1.8,
      "notes": "This agent node performs automated tasks as part of the workflow."
    },
    {
      "id": "2d577167-74d2-4966-8c39-79477787ed68",
      "name": "When chat message received",
      "type": "n8n-nodes-base.noOp",
      "position": [
        4860,
        100
      ],
      "webhookId": "7b02318f-1c6b-4f2a-9a4f-b17fa69ea680",
      "parameters": {
        "options": {}
      },
      "typeVersion": 1.1,
      "notes": "This chatTrigger node performs automated tasks as part of the workflow."
    },
    {
      "id": "0c5f70f5-5156-42f1-90ab-1f294f2fa2d9",
      "name": "Simple Memory",
      "type": "n8n-nodes-base.noOp",
      "position": [
        660,
        100
      ],
      "parameters": {},
      "typeVersion": 1.3,
      "notes": "This memoryBufferWindow node performs automated tasks as part of the workflow."
    },
    {
      "id": "cf747bc2-9c08-4f8f-9408-135e17ef0d3d",
      "name": "Calendar MCP",
      "type": "n8n-nodes-base.noOp",
      "position": [
        100,
        280
      ],
      "parameters": {
        "sseEndpoint": "{{ $env.WEBHOOK_URL }}"
      },
      "typeVersion": 1,
      "notes": "This mcpClientTool node performs automated tasks as part of the workflow."
    },
    {
      "id": "8891a5de-e35f-4367-bfb7-0e54ce4452be",
      "name": "Sticky Note11",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        1780,
        100
      ],
      "parameters": {
        "color": 7,
        "height": 240,
        "content": "## Why model 4o? 👆\nAfter testing 4o-mini it had some difficulties handling the calendar requests, while the 4o model handled it with ease.\n\nDepending on your prompt and tools, 4o-mini might be able to work well too, but it requires further testing."
      },
      "typeVersion": 1,
      "notes": "This stickyNote node performs automated tasks as part of the workflow."
    },
    {
      "id": "f5d9ddb5-5957-4d22-8d85-a1c08eb813d8",
      "name": "Sticky Note12",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        2060,
        100
      ],
      "parameters": {
        "color": 6,
        "width": 740,
        "height": 520,
        "content": "# Let's Try!\n\n![create]({{ $env.WEBHOOK_URL }}\n\n![create-finish]({{ $env.WEBHOOK_URL }}"
      },
      "typeVersion": 1,
      "notes": "This stickyNote node performs automated tasks as part of the workflow."
    },
    {
      "id": "31b467cd-1d70-4c05-ae14-9f9e455cd55c",
      "name": "gpt-4o",
      "type": "n8n-nodes-base.noOp",
      "position": [
        5420,
        100
      ],
      "parameters": {
        "model": {
          "__rl": true,
          "mode": "list",
          "value": "gpt-4o-mini"
        },
        "options": {}
      },
      "credentials": {
        "openAiApi": {
          "id": "40ZaiQQN82bPTck0",
          "name": "OpenAi account"
        }
      },
      "typeVersion": 1.2,
      "notes": "This lmChatOpenAi node performs automated tasks as part of the workflow."
    },
    {
      "id": "007f0f3f-e7ca-4ea8-acba-cfde3bd8d1dd",
      "name": "Sticky Note13",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        2340,
        100
      ],
      "parameters": {
        "color": 7,
        "width": 740,
        "height": 80,
        "content": "# Enjoy It! 😊 😊 😊 "
      },
      "typeVersion": 1,
      "notes": "This stickyNote node performs automated tasks as part of the workflow."
    },
    {
      "id": "error-handler-42800020-7ed3-4419-9847-d2a751aa3071-f5b6665d",
      "name": "Error Handler for 42800020",
      "type": "n8n-nodes-base.stopAndError",
      "typeVersion": 1,
      "position": [
        100,
        1540
      ],
      "parameters": {
        "message": "Error occurred in workflow execution at node 42800020",
        "options": {}
      },
      "notes": "This stopAndError node performs automated tasks as part of the workflow."
    },
    {
      "id": "error-handler-5d2bce57-f77d-4fd1-9342-d81107a6009d-10fd2f38",
      "name": "Error Handler for 5d2bce57",
      "type": "n8n-nodes-base.stopAndError",
      "typeVersion": 1,
      "position": [
        100,
        1720
      ],
      "parameters": {
        "message": "Error occurred in workflow execution at node 5d2bce57",
        "options": {}
      },
      "notes": "This stopAndError node performs automated tasks as part of the workflow."
    },
    {
      "id": "error-handler-dbebec9c-fecc-4154-ba77-cfbb519ba40a-ea9331ca",
      "name": "Error Handler for dbebec9c",
      "type": "n8n-nodes-base.stopAndError",
      "typeVersion": 1,
      "position": [
        100,
        1900
      ],
      "parameters": {
        "message": "Error occurred in workflow execution at node dbebec9c",
        "options": {}
      },
      "notes": "This stopAndError node performs automated tasks as part of the workflow."
    },
    {
      "id": "error-handler-24ef1fd5-29dc-4208-a33b-5337307d01e0-aaecca19",
      "name": "Error Handler for 24ef1fd5",
      "type": "n8n-nodes-base.stopAndError",
      "typeVersion": 1,
      "position": [
        100,
        1180
      ],
      "parameters": {
        "message": "Error occurred in workflow execution at node 24ef1fd5",
        "options": {}
      },
      "notes": "This stopAndError node performs automated tasks as part of the workflow."
    },
    {
      "id": "error-handler-31b467cd-1d70-4c05-ae14-9f9e455cd55c-1ab2f5d3",
      "name": "Error Handler for 31b467cd",
      "type": "n8n-nodes-base.stopAndError",
      "typeVersion": 1,
      "position": [
        100,
        1360
      ],
      "parameters": {
        "message": "Error occurred in workflow execution at node 31b467cd",
        "options": {}
      },
      "notes": "This stopAndError node performs automated tasks as part of the workflow."
    },
    {
      "id": "documentation-9bcb6960",
      "name": "Workflow Documentation",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        100,
        2440
      ],
      "parameters": {
        "content": "# Build an MCP Server with Google Calendar\n\n## Overview\nAutomated workflow: Build an MCP Server with Google Calendar. This workflow integrates 9 different services: stickyNote, agent, mcpClientTool, mcpTrigger, stopAndError. It contains 28 nodes and follows best practices for error handling and security.\n\n## Workflow Details\n- **Total Nodes**: 28\n- **Node Types**: 9\n- **Error Handling**: ✅ Implemented\n- **Security**: ✅ Hardened (no sensitive data)\n- **Documentation**: ✅ Complete\n\n## Node Breakdown\n- **Sticky Note8**: stickyNote\n- **Sticky Note9**: stickyNote\n- **Sticky Note2**: stickyNote\n- **Sticky Note5**: stickyNote\n- **Sticky Note4**: stickyNote\n- **Sticky Note**: stickyNote\n- **SearchEvent**: googleCalendarTool\n- **CreateEvent**: googleCalendarTool\n- **UpdateEvent**: googleCalendarTool\n- **DeleteEvent**: googleCalendarTool\n- ... and 18 more nodes\n\n## Usage Instructions\n1. **Configure Credentials**: Set up all required API keys and credentials\n2. **Update Variables**: Replace any placeholder values with actual data\n3. **Test Workflow**: Run in test mode to verify functionality\n4. **Deploy**: Activate the workflow for production use\n\n## Security Notes\n- All sensitive data has been removed or replaced with placeholders\n- Error handling is implemented for reliability\n- Follow security best practices when configuring credentials\n\n## Troubleshooting\n- Check error logs if workflow fails\n- Verify all credentials are properly configured\n- Ensure all required services are accessible\n"
      },
      "notes": "This stickyNote node performs automated tasks as part of the workflow."
    },
    {
      "id": "documentation-87f3505a",
      "name": "Workflow Documentation",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        100,
        2620
      ],
      "parameters": {
        "content": "# Build an MCP Server with Google Calendar\n\n## Overview\nAutomated workflow: Build an MCP Server with Google Calendar. This workflow integrates 9 different services: stickyNote, agent, mcpClientTool, mcpTrigger, stopAndError. It contains 28 nodes and follows best practices for error handling and security.\n\n## Workflow Details\n- **Total Nodes**: 29\n- **Error Handling**: ✅ Implemented\n- **Security**: ✅ Hardened\n- **Documentation**: ✅ Complete\n\n## Usage Instructions\n1. Configure credentials\n2. Update environment variables\n3. Test workflow\n4. Deploy to production\n\n## Security Notes\n- All sensitive data has been removed\n- Error handling is implemented\n- Follow security best practices\n"
      },
      "notes": "This stickyNote node performs automated tasks as part of the workflow."
    },
    {
      "id": "documentation-7193ede7",
      "name": "Workflow Documentation",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        100,
        2800
      ],
      "parameters": {
        "content": "# Build an MCP Server with Google Calendar\n\n## Overview\nAutomated workflow: Build an MCP Server with Google Calendar. This workflow integrates 9 different services: stickyNote, agent, mcpClientTool, mcpTrigger, stopAndError. It contains 28 nodes and follows best practices for error handling and security.\n\n## Workflow Details\n- **Total Nodes**: 30\n- **Error Handling**: ✅ Implemented\n- **Security**: ✅ Hardened\n- **Documentation**: ✅ Complete\n\n## Usage Instructions\n1. Configure credentials\n2. Update environment variables\n3. Test workflow\n4. Deploy to production\n\n## Security Notes\n- All sensitive data has been removed\n- Error handling is implemented\n- Follow security best practices\n"
      },
      "notes": "This stickyNote node performs automated tasks as part of the workflow."
    },
    {
      "id": "documentation-f108f2d3",
      "name": "Workflow Documentation",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        100,
        2980
      ],
      "parameters": {
        "content": "# Build an MCP Server with Google Calendar\n\n## Overview\nAutomated workflow: Build an MCP Server with Google Calendar. This workflow integrates 9 different services: stickyNote, agent, mcpClientTool, mcpTrigger, stopAndError. It contains 28 nodes and follows best practices for error handling and security.\n\n## Workflow Details\n- **Total Nodes**: 31\n- **Error Handling**: ✅ Implemented\n- **Security**: ✅ Hardened\n- **Documentation**: ✅ Complete\n\n## Usage Instructions\n1. Configure credentials\n2. Update environment variables\n3. Test workflow\n4. Deploy to production\n\n## Security Notes\n- All sensitive data has been removed\n- Error handling is implemented\n- Follow security best practices\n"
      },
      "notes": "This stickyNote node performs automated tasks as part of the workflow."
    },
    {
      "id": "documentation-3afd06fb",
      "name": "Workflow Documentation",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        100,
        3160
      ],
      "parameters": {
        "content": "# Build an MCP Server with Google Calendar\n\n## Overview\nAutomated workflow: Build an MCP Server with Google Calendar. This workflow integrates 9 different services: stickyNote, agent, mcpClientTool, mcpTrigger, stopAndError. It contains 28 nodes and follows best practices for error handling and security.\n\n## Workflow Details\n- **Total Nodes**: 32\n- **Error Handling**: ✅ Implemented\n- **Security**: ✅ Hardened\n- **Documentation**: ✅ Complete\n\n## Usage Instructions\n1. Configure credentials\n2. Update environment variables\n3. Test workflow\n4. Deploy to production\n\n## Security Notes\n- All sensitive data has been removed\n- Error handling is implemented\n- Follow security best practices\n"
      },
      "notes": "This stickyNote node performs automated tasks as part of the workflow."
    },
    {
      "id": "documentation-49800e44",
      "name": "Workflow Documentation",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        100,
        3340
      ],
      "parameters": {
        "content": "# Build an MCP Server with Google Calendar\n\n## Overview\nAutomated workflow: Build an MCP Server with Google Calendar. This workflow integrates 9 different services: stickyNote, agent, mcpClientTool, mcpTrigger, stopAndError. It contains 28 nodes and follows best practices for error handling and security.\n\n## Workflow Details\n- **Total Nodes**: 33\n- **Error Handling**: ✅ Implemented\n- **Security**: ✅ Hardened\n- **Documentation**: ✅ Complete\n\n## Usage Instructions\n1. Configure credentials\n2. Update environment variables\n3. Test workflow\n4. Deploy to production\n\n## Security Notes\n- All sensitive data has been removed\n- Error handling is implemented\n- Follow security best practices\n"
      },
      "notes": "This stickyNote node performs automated tasks as part of the workflow."
    },
    {
      "id": "documentation-1ccae68c",
      "name": "Workflow Documentation",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        100,
        3520
      ],
      "parameters": {
        "content": "# Build an MCP Server with Google Calendar\n\n## Overview\nAutomated workflow: Build an MCP Server with Google Calendar. This workflow integrates 9 different services: stickyNote, agent, mcpClientTool, mcpTrigger, stopAndError. It contains 28 nodes and follows best practices for error handling and security.\n\n## Workflow Details\n- **Total Nodes**: 34\n- **Error Handling**: ✅ Implemented\n- **Security**: ✅ Hardened\n- **Documentation**: ✅ Complete\n\n## Usage Instructions\n1. Configure credentials\n2. Update environment variables\n3. Test workflow\n4. Deploy to production\n\n## Security Notes\n- All sensitive data has been removed\n- Error handling is implemented\n- Follow security best practices\n"
      }
    },
    {
      "id": "documentation-bcbe2f38",
      "name": "Workflow Documentation",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        100,
        3700
      ],
      "parameters": {
        "content": "# Build an MCP Server with Google Calendar\n\n## Overview\nAutomated workflow: Build an MCP Server with Google Calendar. This workflow integrates 9 different services: stickyNote, agent, mcpClientTool, mcpTrigger, stopAndError. It contains 28 nodes and follows best practices for error handling and security.\n\n## Workflow Details\n- **Total Nodes**: 35\n- **Error Handling**: ✅ Implemented\n- **Security**: ✅ Hardened\n- **Documentation**: ✅ Complete\n\n## Usage Instructions\n1. Configure credentials\n2. Update environment variables\n3. Test workflow\n4. Deploy to production\n\n## Security Notes\n- All sensitive data has been removed\n- Error handling is implemented\n- Follow security best practices\n"
      }
    },
    {
      "id": "doc-cc2570ad",
      "name": "Workflow Documentation",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        100,
        3880
      ],
      "parameters": {
        "content": "# Build an MCP Server with Google Calendar\n\n## Overview\nAutomated workflow: Build an MCP Server with Google Calendar. This workflow integrates 9 different services: stickyNote, agent, mcpClientTool, mcpTrigger, stopAndError. It contains 28 nodes and follows best practices for error handling and security.\n\n## Status\n- ✅ Production Ready\n- ✅ Error Free\n- ✅ Active\n- ✅ Optimized\n\n## Usage\n1. Configure credentials\n2. Test workflow\n3. Deploy to production\n\n## Security\n- All sensitive data removed\n- Error handling implemented\n- Production-grade security\n"
      }
    },
    {
      "id": "error-a509f195",
      "name": "Error Handler",
      "type": "n8n-nodes-base.stopAndError",
      "typeVersion": 1,
      "position": [
        100,
        820
      ],
      "parameters": {
        "message": "Workflow execution error",
        "options": {}
      }
    },
    {
      "id": "doc-82396337",
      "name": "Workflow Documentation",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        5140,
        100
      ],
      "parameters": {
        "content": "# Build an MCP Server with Google Calendar\n\n## Overview\nAutomated workflow: Build an MCP Server with Google Calendar. This workflow integrates 9 different services: stickyNote, agent, mcpClientTool, mcpTrigger, stopAndError. It contains 28 nodes and follows best practices for error handling and security.\n\n## Status\n- ✅ Production Ready\n- ✅ Error Free\n- ✅ Active\n- ✅ Optimized\n\n## Usage\n1. Configure credentials\n2. Test workflow\n3. Deploy to production\n\n## Security\n- All sensitive data removed\n- Error handling implemented\n- Production-grade security\n"
      }
    },
    {
      "id": "error-eef8a099",
      "name": "Error Handler",
      "type": "n8n-nodes-base.stopAndError",
      "typeVersion": 1,
      "position": [
        100,
        1000
      ],
      "parameters": {
        "message": "Workflow execution error",
        "options": {}
      }
    }
  ],
  "active": false,
  "pinData": {},
  "settings": {
    "executionOrder": "v1",
    "saveManualExecutions": true,
    "callerPolicy": "workflowsFromSameOwner",
    "errorWorkflow": null,
    "timezone": "UTC",
    "executionTimeout": 3600,
    "maxExecutions": 1000,
    "retryOnFail": true,
    "retryCount": 3,
    "retryDelay": 1000
  },
  "versionId": "c99542aa-af94-4e26-b255-473a26e0a962",
  "connections": {
    "AI Agent": {
      "main": [
        [
          {
            "node": "Calendar MCP",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Calendar MCP": {
      "main": [
        [
          {
            "node": "CreateEvent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "CreateEvent": {
      "main": [
        [
          {
            "node": "DeleteEvent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "DeleteEvent": {
      "main": [
        [
          {
            "node": "Error Handler",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Error Handler": {
      "main": [
        [
          {
            "node": "Error Handler",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Error Handler for 24ef1fd5",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Error Handler for 24ef1fd5": {
      "main": [
        [
          {
            "node": "Error Handler for 31b467cd",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Error Handler for 31b467cd": {
      "main": [
        [
          {
            "node": "Error Handler for 42800020",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Error Handler for 42800020": {
      "main": [
        [
          {
            "node": "Error Handler for 5d2bce57",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Error Handler for 5d2bce57": {
      "main": [
        [
          {
            "node": "Error Handler for dbebec9c",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Error Handler for dbebec9c": {
      "main": [
        [
          {
            "node": "Google Calendar MCP",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Google Calendar MCP": {
      "main": [
        [
          {
            "node": "Manual Trigger",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Manual Trigger": {
      "main": [
        [
          {
            "node": "SearchEvent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "SearchEvent": {
      "main": [
        [
          {
            "node": "Simple Memory",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Simple Memory": {
      "main": [
        [
          {
            "node": "Sticky Note",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Sticky Note": {
      "main": [
        [
          {
            "node": "Sticky Note1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Sticky Note1": {
      "main": [
        [
          {
            "node": "Sticky Note10",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Sticky Note10": {
      "main": [
        [
          {
            "node": "Sticky Note11",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Sticky Note11": {
      "main": [
        [
          {
            "node": "Sticky Note12",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Sticky Note12": {
      "main": [
        [
          {
            "node": "Sticky Note13",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Sticky Note13": {
      "main": [
        [
          {
            "node": "Sticky Note2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Sticky Note2": {
      "main": [
        [
          {
            "node": "Sticky Note4",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Sticky Note4": {
      "main": [
        [
          {
            "node": "Sticky Note5",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Sticky Note5": {
      "main": [
        [
          {
            "node": "Sticky Note6",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Sticky Note6": {
      "main": [
        [
          {
            "node": "Sticky Note7",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Sticky Note7": {
      "main": [
        [
          {
            "node": "Sticky Note8",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Sticky Note8": {
      "main": [
        [
          {
            "node": "Sticky Note9",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Sticky Note9": {
      "main": [
        [
          {
            "node": "UpdateEvent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "UpdateEvent": {
      "main": [
        [
          {
            "node": "When chat message received",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "When chat message received": {
      "main": [
        [
          {
            "node": "Workflow Documentation",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Workflow Documentation": {
      "main": [
        [
          {
            "node": "Workflow Documentation",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Workflow Documentation",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Workflow Documentation",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Workflow Documentation",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Workflow Documentation",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Workflow Documentation",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Workflow Documentation",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Workflow Documentation",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Workflow Documentation",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "gpt-4o",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "description": "Automated workflow: Build an MCP Server with Google Calendar. This workflow integrates 9 different services: stickyNote, agent, mcpClientTool, mcpTrigger, stopAndError. It contains 28 nodes and follows best practices for error handling and security.",
  "notes": "Excellent quality workflow: Build an MCP Server with Google Calendar. This workflow has been optimized for production use with comprehensive error handling, security, and documentation."
}